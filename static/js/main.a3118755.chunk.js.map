{"version":3,"sources":["serviceWorker.ts","components/add-item-form/AddItemForm.tsx","components/editable-span/EditableSpan.tsx","api/todolists-api.ts","app/app-reducer.ts","state/tasks-reducer.ts","Task.tsx","Todolist.tsx","state/todolist-reducer.ts","components/error-snack-bar/ErrorSnackbar.tsx","app/AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","React","memo","props","console","log","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","key","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","post","todolistId","delete","put","taskId","initialState","status","setAppStatusAC","type","setAppErrorAC","Task","onChangeTitleHandler","useCallback","newValue","changeTaskTitle","task","id","className","isDone","Checkbox","newIsDoneValue","checked","changeTaskStatus","removeTask","Delete","Todolist","dispatch","useDispatch","useEffect","then","res","action","tasks","setTasksAC","data","items","addTask","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","changeTodolistTitle","newTitle","tasksForTodolist","filter","t","removeTodolist","map","Button","addTodolistTC","resultCode","item","v1","AddTodolistAC","messages","length","Alert","elevation","ErrorSnackbar","setOpen","useSelector","state","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","AppWithRedux","todolists","RemoveTodolistAC","removeTodolistTC","ChangeTodolistTitleAC","ChangeTodolistFilterAC","thunk","addTaskAC","catch","message","addTaskTC","removeTaskAC","removeTaskTC","changeStatus","changeTaskStatusAC","changeTaskTitlesAC","changeTaskTitlesTC","addTodolist","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","Grid","container","style","padding","spacing","tl","Paper","rootReducer","combineReducers","stateCopy","newTasks","newTask","todoListId","todolistTasks","newTasksArray","forEach","todolist","find","store","createStore","applyMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a3118755.chunk.js","sourcesContent":["\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { Button, IconButton, TextField } from '@material-ui/core';\r\nimport { AddBox } from '@material-ui/icons';\r\nimport React, { useState, ChangeEvent, KeyboardEvent } from 'react';\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo( (props: AddItemFormPropsType) => {\r\n\r\n    console.log(\"AddItemForm called\")\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null> (null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n    }\r\n \r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null ) {\r\n            setError(null);\r\n        }\r\n        if (e.key === 'Enter') {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return  <div>\r\n        <TextField  variant=\"outlined\"\r\n                    error={!!error}\r\n                    value={title} \r\n                    onChange={onChangeHandler}\r\n                    onKeyPress={ onKeyPressHandler }\r\n                    label='Title'\r\n                    helperText={error}\r\n            />\r\n            <IconButton color=\"primary\" onClick={addItem}><AddBox /></IconButton>\r\n    </div>\r\n})\r\n\r\n\r\n","import { TextField } from '@material-ui/core';\r\nimport React, { useState, ChangeEvent } from 'react'\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    onChange: (newValue: string) => void\r\n   }\r\n   \r\n  export const EditableSpan = React.memo ( (props: EditableSpanPropsType ) => {\r\n\r\n        console.log('editablespan called')\r\n\r\n        let [editMode, setEditMode] = useState(false)\r\n        let [title, setTitle] = useState('')\r\n\r\n        const activatedEditMode = () => {\r\n            setEditMode(true);\r\n            setTitle(props.title)\r\n\r\n        };\r\n        const activatedViewMode = () => {\r\n            setEditMode(false);\r\n            props.onChange(title)\r\n        \r\n        };\r\n        const onChangeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n\r\n\r\n\r\n       return editMode \r\n       ? <TextField variant='outlined' onChange={onChangeTitleHandler} autoFocus onBlur={activatedViewMode} value={title} />\r\n       : <span  onDoubleClick={activatedEditMode} >{props.title}</span>\r\n\r\n   })\r\n   ","import axios from 'axios';\r\nimport {TodolistType} from '../App'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'fc086433-a3b2-4e29-b729-0bb49b9ccb7d'\r\n    } \r\n }\r\n const instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'fc086433-a3b2-4e29-b729-0bb49b9ccb7d'\r\n    }\r\n })\r\n \r\n//  export type TodolistType= {\r\n//     id: string\r\n//     addedDate: string\r\n//     order: number\r\n//     title: string\r\n//  }\r\n \r\n type CreateTodolistResponseType = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: {\r\n        item: TodolistType\r\n    }\r\n }\r\n type DeleteTodolistResponseType = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: {}\r\n }\r\n type UpdateTodolistResponseType = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: {}\r\n }\r\n \r\n type ResponseType<D> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n }\r\n\r\n export type ApiTaskType ={\r\n    isDone: boolean\r\n    description: string\r\n    title: string\r\n    completed: boolean\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n    id:string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n }\r\n\r\n type GetTasksResponseType = {\r\n     error: string | null\r\n     totalCount: number\r\n     items: ApiTaskType[]\r\n }\r\n\r\n type CreateTaskType= {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: {}\r\n }\r\n \r\n\r\n export const todolistsAPI = {\r\n    getTodolist() {\r\n        const promise = instance.get<Array<TodolistType>>('todo-lists')\r\n        return promise\r\n    },\r\n\r\n    createTodolist(title: string) {\r\n        const promise =  instance.post<ResponseType<{item: TodolistType}>>('todo-lists', {title})\r\n        return promise\r\n    },\r\n\r\n    deleteTodolist(todolistId: string) {\r\n        const promise = instance.delete<ResponseType<{}>>(`todo-lists/${todolistId}`)\r\n        return promise\r\n    },\r\n\r\n    updateTodolist(todolistId: string, title: string) {\r\n        const promise = instance.put<UpdateTodolistResponseType>(`todo-lists/${todolistId}`, {title})\r\n        return promise\r\n    },\r\n\r\n    getTodolistTasks(todolistId: string) {\r\n        const promise = instance.get<GetTasksResponseType>(`todo-lists/${todolistId}/tasks`)\r\n        return promise\r\n    },\r\n\r\n    createTask(todolistId: string, title: string) {\r\n        const promise =  instance.post<ResponseType<{item: ApiTaskType}>>(`todo-lists/${todolistId}/tasks`,{title})\r\n        return promise\r\n    },\r\n\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        const promise =  instance.delete<ResponseType<{}>>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n        return promise\r\n    },\r\n    //title, description, completed, status, priority...\r\n    updateTask(taskId: string, title: string, todolistId: string) {\r\n        const promise =  instance.put<ResponseType<{}>>(`todo-lists/${todolistId}/tasks/${taskId}`, {title})\r\n        return promise\r\n    },\r\n }\r\n ","export type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n   status: 'loading' as RequestStatusType,\r\n   error: null\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n   switch (action.type) {\r\n       case 'APP/SET-STATUS':\r\n           return {...state, status: action.status};\r\n       case 'APP/SET-ERROR':\r\n           return {...state, error: action.error};\r\n       default:\r\n           return state\r\n   }\r\n}\r\n\r\ntype ActionsType = any\r\n\r\ntype setAppStatusActionType = {\r\n    type: 'APP/SET-STATUS',\r\n    status: RequestStatusType | null\r\n}\r\n\r\ntype setAppErrorActionType = {\r\n    type: 'APP/SET-ERROR',\r\n    error: string | null\r\n}\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType | null): setAppStatusActionType => {\r\n    return { type: 'APP/SET-STATUS', status}\r\n}\r\nexport const setAppErrorAC = (error: string | null): setAppErrorActionType => {\r\n    return { type: 'APP/SET-ERROR', error}\r\n}","import { Dispatch } from 'redux';\r\nimport { ApiTaskType, todolistsAPI } from '../api/todolists-api';\r\nimport { TasksStateType } from '../App';\r\nimport { setAppErrorAC, setAppStatusAC } from '../app/app-reducer';\r\nimport { TaskType } from '../Todolist';\r\nimport { AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType } from './todolist-reducer';\r\n\r\nexport type SetTasksActionType = {\r\n    type: 'SET-TASKS'\r\n    tasks: Array<TaskType>\r\n    todolistId: string\r\n } \r\n \r\nexport type removeTaskACActionType={\r\n    type: 'REMOVE-TASK'\r\n    taskId: string\r\n    todolistId: string \r\n}\r\nexport type addTaskACActionType={\r\n    type: 'ADD-TASK'\r\n    task: ApiTaskType\r\n}\r\nexport type changeTaskStatusACActionType={\r\n    type: 'CHANGE-TASK-STATUS'\r\n    todolistId: string\r\n    taskId: string\r\n    isDone: boolean\r\n}\r\nexport type changeTaskTitleACActionType={\r\n    type: 'CHANGE-TASK-TITLE'\r\n    todolistId: string\r\n    taskId: string\r\n    title: string\r\n}\r\ntype ActionsType = removeTaskACActionType \r\n| addTaskACActionType \r\n| changeTaskStatusACActionType \r\n| changeTaskTitleACActionType \r\n| AddTodolistActionType \r\n| RemoveTodolistActionType\r\n| SetTodolistsActionType\r\n| SetTasksActionType\r\n\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId];\r\n            const newTasks = tasks.filter(t => t.id !== action.taskId);\r\n            stateCopy[action.todolistId] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state}\r\n            const newTask = action.task\r\n            const tasks = stateCopy[newTask.todoListId];\r\n            const newTasks = [newTask, ...tasks];\r\n            stateCopy[newTask.todoListId] = newTasks;\r\n            return stateCopy;\r\n         }\r\n         \r\n        case 'CHANGE-TASK-STATUS': {\r\n            let todolistTasks = state[action.todolistId];\r\n            state[action.todolistId] = todolistTasks.map(t =>  t.id === action.taskId \r\n                                                        ? {...t, isDone: action.isDone}\r\n                                                        : t );\r\n            return ({...state});\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            let todolistTasks = state[action.todolistId];\r\n            let newTasksArray = todolistTasks\r\n                .map(t => t.id === action.taskId ? {...t, title: action.title} : t);\r\n\r\n            state[action.todolistId] = newTasksArray;\r\n            return ({...state});\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            let stateCopy = {...state};\r\n            stateCopy[action.todolistId] = [];\r\n            return stateCopy;\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            let stateCopy = {...state};\r\n            delete stateCopy[action.id]\r\n            return stateCopy;\r\n        }\r\n        case 'SET-TODOLISTS': {\r\n            const stateCopy = {...state}\r\n            action.todolists.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy;\r\n        }\r\n        case 'SET-TASKS': {\r\n            const stateCopy = {...state}\r\n            stateCopy[action.todolistId] = action.tasks\r\n            return stateCopy\r\n         }         \r\n         \r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string ): removeTaskACActionType => {\r\n    return { type: 'REMOVE-TASK', taskId, todolistId }\r\n }\r\n \r\nexport const addTaskAC = (task: ApiTaskType): addTaskACActionType => {\r\n    return {type: 'ADD-TASK', task}\r\n } \r\n\r\n// export const addTaskAC = (  title: string, todolistId: string ): addTaskACActionType => {\r\n//     return { type: 'ADD-TASK', title, todolistId }\r\n//  }\r\n\r\nexport const changeTaskStatusAC = ( taskId: string, isDone: boolean, todolistId: string): changeTaskStatusACActionType => {\r\n    return { type: 'CHANGE-TASK-STATUS', taskId, todolistId, isDone  }\r\n }\r\n \r\nexport const changeTaskTitlesAC = (taskId: string, title: string, todolistId: string): changeTaskTitleACActionType => {\r\n    return { type: 'CHANGE-TASK-TITLE', taskId,  title, todolistId }\r\n}\r\n\r\nexport const AddTodolistAC = (taskId: string, title: string, todolistId: string): changeTaskTitleACActionType => {\r\n    return { type: 'CHANGE-TASK-TITLE', taskId,  title, todolistId }\r\n}\r\nexport const setTasksAC = (tasks: Array<ApiTaskType>, todolistId: string): SetTasksActionType => {\r\n    return {type: 'SET-TASKS', tasks, todolistId}\r\n }\r\n \r\n export const fetchTasksTC = (todolistId: string) => {\r\n        \r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC('loading')) \r\n        todolistsAPI.getTodolistTasks(todolistId)\r\n            .then((res) => {\r\n                const tasks = res.data.items\r\n                const action = setTasksAC(tasks, todolistId)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded')) \r\n            })\r\n    }\r\n }\r\n\r\n export const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading')) \r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n     .then(res => {\r\n         const action = removeTaskAC(taskId, todolistId)\r\n         dispatch(action)\r\n         dispatch(setAppStatusAC('succeeded'))\r\n     } )\r\n }\r\n \r\n export const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n   todolistsAPI.createTask(todolistId, title)\r\n       .then(res => {\r\n           if (res.data.resultCode === 0) {\r\n               const task = res.data.data.item\r\n               dispatch(addTaskAC(task))\r\n               dispatch(setAppStatusAC('succeeded'))\r\n           } else {\r\n               if (res.data.messages.length) {\r\n                   dispatch(setAppErrorAC(res.data.messages[0]))\r\n               } else {\r\n                   dispatch(setAppErrorAC('Some error occurred'))\r\n               }\r\n               dispatch(setAppStatusAC('failed'))\r\n           }\r\n       })\r\n       .catch((error) => {\r\n           dispatch(setAppErrorAC(error.message))\r\n           dispatch(setAppErrorAC('failed'))\r\n       })\r\n}\r\n\r\n\r\n export const changeTaskTitlesTC = (taskId: string, title: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.updateTask(taskId, title, todolistId)\r\n    .then(res => {\r\n        const action = changeTaskTitlesAC(taskId, title, todolistId)\r\n        dispatch(action)\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    } )\r\n}\r\n\r\n\r\n","import { Checkbox, IconButton } from '@material-ui/core';\r\nimport { Delete } from '@material-ui/icons';\r\nimport React, { ChangeEvent, useCallback} from 'react';\r\nimport { EditableSpan } from './components/editable-span/EditableSpan';\r\nimport { TaskType } from './Todolist';\r\n\r\ntype TaskPropsType = {\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId:string) => void\r\n    removeTask: (taskId: string, todolistId:string) => void\r\n    changeTaskTitle: (id: string, newTitle: string, todolistId:string) => void\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\n\r\nexport const Task = React.memo ( (props: TaskPropsType) => {\r\n            const onClickHandler = () => props.removeTask(props.task.id,  props.todolistId)\r\n            const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                let newIsDoneValue = e.currentTarget.checked;\r\n                props.changeTaskStatus(props.task.id, newIsDoneValue,  props.todolistId)\r\n            }\r\n            const onChangeTitleHandler = useCallback( (newValue: string) => {\r\n               props.changeTaskTitle(props.task.id, newValue,  props.todolistId)\r\n            }, [props.changeTaskTitle, props.task.id, props.todolistId])\r\n\r\n\r\n\r\n         return <div key={props.task.id} className={props.task.isDone ? \"is-done\" : \"\" }>\r\n            <Checkbox color='secondary' onChange={onChangeStatusHandler} checked={props.task.isDone}/> \r\n            <EditableSpan title={props.task.title} onChange={onChangeTitleHandler} />  \r\n            <IconButton onClick={onClickHandler}> <Delete/> </IconButton>    \r\n        </div>\r\n})\r\n","import { Button, Checkbox, IconButton } from '@material-ui/core';\r\nimport { Delete } from '@material-ui/icons';\r\nimport React, { ChangeEvent,  useCallback, useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport {AddItemForm} from './components/add-item-form/AddItemForm';\r\nimport { FilterValuesType } from './App';\r\nimport { EditableSpan } from './components/editable-span/EditableSpan';\r\nimport { fetchTasksTC } from './state/tasks-reducer';\r\nimport { Task } from './Task';\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    addTask: (title: string, todolistId:string) => void\r\n    changeFilter: (filter: FilterValuesType, id: string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean, todolistId:string) => void\r\n    removeTask: (taskId: string, todolistId:string) => void\r\n    changeTaskTitle: (id: string, newTitle: string, todolistId:string) => void\r\n    filter: FilterValuesType\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTodolistTitle: (todolistId: string, newTitle: string) => void\r\n}\r\n\r\n\r\n\r\n\r\nconst Todolist = React.memo ((props: PropsType) => {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect( () => {\r\n   dispatch(fetchTasksTC(props.id))\r\n  }, [])\r\n\r\n    console.log('Todolist called')\r\n    \r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addTask = useCallback ( (title: string) => props.addTask(title, props.id), [props.addTask, props.id] );\r\n    const onAllClickHandler = useCallback ( () => props.changeFilter(\"all\", props.id), [] );\r\n    const onActiveClickHandler = useCallback ( () => props.changeFilter(\"active\", props.id), []);\r\n    const onCompletedClickHandler = useCallback ( () => props.changeFilter(\"completed\", props.id), []);\r\n    const removeTodolist = () => props.removeTodolist(props.id)\r\n\r\n    const changeTodolistTitle =  useCallback ( (newTitle: string) => props.changeTodolistTitle(props.id, newTitle), [props.id,  props.changeTodolistTitle]);\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = props.tasks.filter(\r\n          (t) => t.isDone === false\r\n        );\r\n      }\r\n\r\n      if (props.filter === \"completed\") {\r\n        tasksForTodolist = props.tasks.filter(\r\n          (t) => t.isDone === true\r\n        );\r\n      }\r\n\r\n    return (\r\n         <div>\r\n                <h3> <EditableSpan title={props.title} onChange={changeTodolistTitle}/> \r\n                <IconButton onClick={removeTodolist}> <Delete /> </IconButton>\r\n                </h3>\r\n                <AddItemForm addItem={addTask}/>\r\n                <div>\r\n                    {\r\n                       tasksForTodolist.map(t => <Task\r\n                        task={t}\r\n                        changeTaskStatus={props.changeTaskStatus}\r\n                        changeTaskTitle={props.changeTaskTitle}\r\n                        removeTask={props.removeTask}\r\n                        todolistId={props.id}\r\n                        key={t.id}\r\n                       />)\r\n                    }\r\n                </div>\r\n                <div>\r\n                    <Button variant={props.filter === 'all'  ? \"contained\" : \"outlined\"} \r\n                            color={'default'}\r\n                            onClick={ onAllClickHandler }>\r\n                                All </Button>\r\n\r\n                    <Button variant={props.filter === 'active' ? \"contained\" : \"outlined\"}\r\n                            color={'primary'}\r\n                            onClick={ onActiveClickHandler }\r\n                            >Active</Button>\r\n                    <Button variant={props.filter === 'completed' ? \"contained\" : \"outlined\"}\r\n                            color={'secondary'}\r\n                            onClick={ onCompletedClickHandler }>Completed</Button>\r\n               </div>\r\n            </div>\r\n    )\r\n})\r\n\r\n\r\n\r\nexport default Todolist","import { Dispatch } from 'redux';\r\nimport { v1 } from 'uuid';\r\nimport { todolistsAPI } from '../api/todolists-api';\r\nimport { FilterValuesType, TodolistType } from '../App';\r\nimport { setAppErrorAC, setAppStatusAC } from '../app/app-reducer';\r\n\r\nexport type RemoveTodolistActionType={\r\n    type: 'REMOVE-TODOLIST',\r\n    id: string\r\n}\r\n\r\nexport type AddTodolistActionType={\r\n    type: 'ADD-TODOLIST'\r\n    title: string\r\n    todolistId: string\r\n}\r\n\r\nexport type ChangeTodolistTitleActionType={\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    id: string,\r\n    title: string\r\n}\r\n\r\nexport type ChangeTodolistFilterActionType={\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    id: string,\r\n    filter: FilterValuesType\r\n}\r\n\r\n\r\ntype ActionsType = RemoveTodolistActionType \r\n| AddTodolistActionType \r\n| ChangeTodolistTitleActionType \r\n| ChangeTodolistFilterActionType \r\n| SetTodolistsActionType\r\n\r\nexport type SetTodolistsActionType = {\r\n    type: 'SET-TODOLISTS'\r\n    todolists: Array<TodolistType>\r\n }\r\n \r\n\r\nconst initialState: Array<TodolistType> = []\r\n\r\nexport const todolistReducer = (state: Array<TodolistType> = initialState, action: ActionsType): Array<TodolistType> => {\r\n    switch (action.type) {\r\n\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter((tl) => tl.id !== action.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [...state, {\r\n                id: action.todolistId,\r\n                title: action.title,\r\n                filter: \"all\",\r\n            }]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find((tl) => tl.id === action.id);\r\n            if (todolist) {\r\n                todolist.title = action.title;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find((tl) => tl.id === action.id);\r\n            if (todolist) {\r\n                todolist.filter = action.filter;\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'SET-TODOLISTS': {\r\n            return action.todolists.map(tl => ({\r\n                ...tl,\r\n                filter: 'all' \r\n            }))\r\n         }\r\n         \r\n\r\n\r\n\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const RemoveTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return { type: 'REMOVE-TODOLIST', id: todolistId}\r\n }\r\n \r\nexport const AddTodolistAC = (title: string): AddTodolistActionType => {\r\n    return { type: 'ADD-TODOLIST', title: title , todolistId: v1() }\r\n }\r\n\r\nexport const ChangeTodolistTitleAC = (id: string, title: string): ChangeTodolistTitleActionType => {\r\n    return { type: 'CHANGE-TODOLIST-TITLE', id: id, title: title }\r\n }\r\n \r\nexport const ChangeTodolistFilterAC = ( filter: FilterValuesType, id: string): ChangeTodolistFilterActionType => {\r\n    return { type: 'CHANGE-TODOLIST-FILTER',filter: filter ,  id: id}\r\n }\r\n \r\nexport const setTodolistsAC = (todolists: Array<TodolistType>): SetTodolistsActionType => {\r\n    return {type: 'SET-TODOLISTS', todolists}\r\n }\r\n \r\nexport const fetchTodolistsTC = () => {\r\n return (dispatch: Dispatch) => {\r\n     dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTodolist()\r\n        .then((res) => {\r\n            dispatch(setTodolistsAC(res.data))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n return (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.deleteTodolist(todolistId)\r\n        .then((res) => {\r\n            dispatch(RemoveTodolistAC(todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n return (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTodolist(title)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                const title = res.data.data.item.title\r\n                dispatch(AddTodolistAC(title))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                if (res.data.messages.length) {\r\n                    dispatch(setAppErrorAC(res.data.messages[0]))\r\n                } else {\r\n                    dispatch(setAppErrorAC('Some error occurred'))\r\n                }\r\n                dispatch(setAppStatusAC('failed'))\r\n            }\r\n        })\r\n }\r\n}\r\n\r\nexport const ChangeTodolistTitleTC = (id: string, title: string) => {\r\n return (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.updateTodolist(id, title)\r\n        .then((res) => {\r\n            dispatch(ChangeTodolistTitleAC(id, title))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n }\r\n}","import React, { Dispatch } from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { appReducer, setAppErrorAC } from '../../app/app-reducer'\r\nimport { AppRootStateType } from '../../state/store'\r\n\r\nfunction Alert(props: AlertProps) {\r\n   return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n   const [open, setOpen] = React.useState(true)\r\n   const error = useSelector<AppRootStateType, string | null>( state => state.app.error)\r\n   const dispatch = useDispatch()\r\n\r\n   const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n       if (reason === 'clickaway') {\r\n           return \r\n       } \r\n       dispatch(setAppErrorAC(null))\r\n       setOpen(false)\r\n   }\r\n\r\n\r\n   return (\r\n       <Snackbar open={error !== null} autoHideDuration={4000} onClose={handleClose}>\r\n           <Alert onClose={handleClose} severity=\"error\">\r\n            {error}\r\n           </Alert>\r\n       </Snackbar>\r\n   )\r\n}\r\n","import React, { useCallback, useEffect, useReducer, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport Todolist, { TaskType } from \"../Todolist\";\r\nimport { v1 } from \"uuid\";\r\nimport {AddItemForm} from \"../components/add-item-form/AddItemForm\";\r\nimport { AppBar, Button,Container,Grid,IconButton,Paper,Toolbar, Typography, LinearProgress} from \"@material-ui/core\";\r\nimport { Menu } from \"@material-ui/icons\";\r\nimport { AddTodolistAC, addTodolistTC, ChangeTodolistFilterAC, ChangeTodolistTitleAC, ChangeTodolistTitleTC, fetchTodolistsTC, RemoveTodolistAC, removeTodolistTC, setTodolistsAC } from \"../state/todolist-reducer\";\r\nimport { addTaskAC, addTaskTC, changeTaskStatusAC, changeTaskTitlesAC, changeTaskTitlesTC, removeTaskAC, removeTaskTC} from \"../state/tasks-reducer\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppRootStateType } from \"../state/store\";\r\nimport { todolistsAPI } from \"../api/todolists-api\";\r\nimport { AxiosResponse } from \"axios\";\r\nimport { RequestStatusType } from \"./app-reducer\";\r\nimport { ErrorSnackbar } from \"../components/error-snack-bar/ErrorSnackbar\";\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\r\nexport type TasksStateType = { [key: string]: Array<TaskType>};\r\nexport type TodolistType = {\r\n  id: string;\r\n  title: string;\r\n  filter: FilterValuesType;\r\n};\r\n\r\n\r\n export function AppWithRedux() {\r\n\r\n  const todolists = useSelector<AppRootStateType, Array<TodolistType>>(state => state.todolists)\r\n  const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect( () => {\r\n   dispatch(fetchTodolistsTC())\r\n  }, [dispatch])\r\n\r\n  \r\n\r\n  const removeTodolist = useCallback ( (todolistId: string) => {\r\n    const action = removeTodolistTC(todolistId);\r\n    dispatch(action);\r\n  }, [dispatch])\r\n\r\n  const changeTodolistTitle = useCallback ( (todolistId: string, newTitle: string) => {\r\n    const action = ChangeTodolistTitleTC(todolistId, newTitle);\r\n    dispatch(action);\r\n  }, [dispatch])\r\n\r\n  const changeFilter = useCallback ( (filter: FilterValuesType, id: string) => {\r\n   let action = ChangeTodolistFilterAC(filter, id);\r\n   dispatch(action);\r\n  }, [dispatch])\r\n\r\n  const addTask = useCallback ( (title: string, todolistId: string) => {\r\n   const thunk = addTaskTC(title, todolistId);\r\n   dispatch(thunk);\r\n  }, [dispatch])\r\n\r\n  const removeTask = useCallback ( function(id: string, todolistId: string) {\r\n   const thunk = removeTaskTC(id, todolistId)\r\n   dispatch(thunk)\r\n  }, [dispatch])\r\n\r\n  const changeStatus = useCallback ( (id: string, isDone: boolean, todolistId: string) => {\r\n    let action = changeTaskStatusAC(id, isDone, todolistId);\r\n    dispatch(action);\r\n  },[dispatch])\r\n\r\n  const changeTaskTitle = useCallback ( (id: string, newTitle: string, todolistId: string) => {\r\n    let action = changeTaskTitlesTC(id, newTitle, todolistId);\r\n    dispatch(action);\r\n  }, [dispatch])\r\n\r\n  const addTodolist = useCallback ( (title: string) => {\r\n    let action = addTodolistTC(title);\r\n    dispatch(action);\r\n  }, [dispatch]);\r\n\r\n  const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <ErrorSnackbar />\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n            <Menu />\r\n          </IconButton>\r\n          <Typography variant=\"h6\">News</Typography>\r\n          <Button color=\"inherit\">Login</Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n      {status === 'loading' && <LinearProgress color=\"secondary\"/>}\r\n      <Container fixed>\r\n        <Grid container style={{padding: '20px'}}>\r\n          <AddItemForm addItem={addTodolist} />\r\n        </Grid>\r\n        <Grid container spacing={3} key=\"tl\">\r\n          {todolists.map((tl) => {\r\n            let allTodolistTasks = tasks[tl.id];\r\n            let tasksForTodolist = allTodolistTasks;\r\n\r\n            return <Grid item>\r\n              <Paper style={{padding: '10px'}}>\r\n              <Todolist\r\n                key={tl.id}\r\n                id={tl.id}\r\n                title={tl.title}\r\n                tasks={tasksForTodolist}\r\n                removeTask={removeTask}\r\n                addTask={addTask}\r\n                changeFilter={changeFilter}\r\n                changeTaskStatus={changeStatus}\r\n                filter={tl.filter}\r\n                removeTodolist={removeTodolist}\r\n                changeTaskTitle={changeTaskTitle}\r\n                changeTodolistTitle={changeTodolistTitle}\r\n              />\r\n              </Paper>\r\n              </Grid>\r\n          })}; \r\n        </Grid>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todolistReducer} from './todolist-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { appReducer } from '../app/app-reducer';\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n   tasks: tasksReducer,\r\n   todolists: todolistReducer,\r\n   app: appReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\n//automatic find type of approotstate\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n//store\r\n// console log store\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from './app/AppWithRedux';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './state/store';\r\n\r\nReactDOM.render(\r\n<Provider store={store}>\r\n<AppWithRedux />\r\n</Provider>, \r\n    document.getElementById('root'));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}